{
  "name": "gulp-handlebars",
  "version": "4.0.0",
  "description": "Handlebars plugin for gulp",
  "main": "index.js",
  "dependencies": {
    "through2": "^0.6.3",
    "handlebars": "^3.0.0",
    "gulp-util": "^3.0.4"
  },
  "devDependencies": {
    "ember-handlebars": "^1.2.0",
    "gulp": "^3.8.11",
    "gulp-concat": "^2.5.2",
    "gulp-declare": "^0.3.0",
    "gulp-define-module": "^0.1.1",
    "gulp-wrap": "^0.11.0",
    "mocha": "^2.1.0",
    "nsdeclare": "^0.1.0",
    "should": "^5.0.1"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/lazd/gulp-handlebars.git"
  },
  "keywords": [
    "gulpplugin",
    "handlebars"
  ],
  "author": {
    "name": "Larry Davis",
    "email": "lazdnet@gmail.com"
  },
  "contributors": [
    {
      "name": "Whitney Young",
      "email": "wbyoung@fadingred.com"
    }
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/lazd/gulp-handlebars/issues"
  },
  "engines": {
    "node": ">=0.10"
  },
  "readme": "# gulp-handlebars [![NPM version][npm-image]][npm-url] [![Build status][travis-image]][travis-url]\n> Handlebars plugin for gulp 3\n\n## Usage\n\nInstall `gulp-handlebars` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-handlebars\n```\n\n## Compiling templates for the browser\n\n[`gulp-declare`][gulp-declare] and [`gulp-wrap`][gulp-wrap] can be used to safely declare template namespaces and make templates available for use in the browser.\n\nFirst, install development dependencies:\n\n```shell\nnpm install --save-dev gulp-handlebars gulp-wrap gulp-declare gulp-concat\n```\n\nGiven the following directory structure:\n\n```\n├── gulpfile.js              # Your gulpfile\n└── source/                  # Your application's source files\n    └── templates/           # A folder containing templates named with dot notation\n        └── home.header.hbs  # A template that will be available as MyApp.templates.home.header\n```\n\nTo compile all templates in `source/templates/` to `build/js/templates.js` under the `MyApp.templates` namespace:\n\n#### gulpfile.js\n```js\nvar handlebars = require('gulp-handlebars');\nvar wrap = require('gulp-wrap');\nvar declare = require('gulp-declare');\nvar concat = require('gulp-concat');\n\ngulp.task('templates', function(){\n  gulp.src('source/templates/*.hbs')\n    .pipe(handlebars())\n    .pipe(wrap('Handlebars.template(<%= contents %>)'))\n    .pipe(declare({\n      namespace: 'MyApp.templates',\n      noRedeclare: true, // Avoid duplicate declarations\n    }))\n    .pipe(concat('templates.js'))\n    .pipe(gulp.dest('build/js/'));\n});\n```\n\nThe template's filename is combined with the namespace, so the resulting `build/js/templates.js` would look like:\n\n```js\nthis[\"MyApp\"] = this[\"MyApp\"] || {};\nthis[\"MyApp\"][\"templates\"] = this[\"MyApp\"][\"templates\"] || {};\nthis[\"MyApp\"][\"templates\"][\"home\"] = this[\"MyApp\"][\"templates\"][\"home\"] || {};\nthis[\"MyApp\"][\"templates\"][\"home\"][\"header\"] = Handlebars.template(function() { /* compiled template function */ });\n```\n\n## Namespace templates according to nested directories\n\nSee the [namespaceByDirectory example](examples/namespaceByDirectory) if you'd like to compile templates with a mapping that looks like this:\n\n| File path                       | Namespace path             |\n| ------------------------------- | -------------------------- |\n| source/templates/App.hbs        | MyApp.templates.App        |\n| source/templates/App/header.hbs | MyApp.templates.App.header |\n| source/templates/App/footer.hbs | MyApp.templates.App.footer |\n| source/templates/Other.item.hbs | MyApp.templates.Other.item |\n\n\n## Compiling to various module systems\n\nSee the [`gulp-define-module` documentation][gulp-define-module documentation] for details on how to define templates as AMD, Node, CommonJS, and hybrid modules.\n\nSee the [amd example](examples/amd) for a full example of compiling templates to AMD modules.\n\n`gulp-handlebars` makes the following available for use in `gulp-define-module`'s [`wrapper` template option](https://github.com/wbyoung/gulp-define-module#optionswrapper):\n\n - `<%= handlebars %>` - The Handlebars template, wrapped in a call to `Handlebars.template()`\n - `<%= contents %>` - The bare Handlebars template (not wrapped).\n\n`gulp-handlebars` also sets a default [`options.require`](https://github.com/wbyoung/gulp-define-module#optionsrequire) of `{ Handlebars: 'handlebars' }` for [`gulp-define-module`][gulp-define-module] so Handlebars will be present in when defining AMD, Node, CommonJS, or hybrid modules. You can change this by passing a different `options.require` when you invoke `gulp-define-module`.\n\n\n## Compiling templates for use in Ember applications\n\nSee the [ember example](examples/ember) for a full example of compiling templates for Ember.\n\nYou can use [`ember-handlebars`][ember-handlebars] to compile templates for use within Ember:\n\n#### gulpfile.js\n```js\ngulp.task('templates', function(){\n  gulp.src('source/templates/*.hbs')\n    .pipe(handlebars({\n      handlebars: require('ember-handlebars')\n    }))\n    .pipe(wrap('Ember.Handlebars.template(<%= contents %>)'))\n    .pipe(declare({\n      namespace: 'Ember.TEMPLATES',\n      noRedeclare: true, // Avoid duplicate declarations\n    }))\n    .pipe(concat('templates.js'))\n    .pipe(gulp.dest('build/js/'));\n});\n```\n\n**Note:** When compiling Ember templates to a module using `gulp-define-module`, be sure to set `options.context.handlebars` accordingly:\n\n```js\ngulp.task('templates', function(){\n  gulp.src('source/templates/*.hbs')\n    .pipe(handlebars({\n      handlebars: require('ember-handlebars')\n    }))\n    .pipe(defineModule('amd', {\n      context: {\n        handlebars: 'Ember.Handlebars.template(<%= contents %>)'\n      }\n    }))\n    .pipe(gulp.dest('build/js/'));\n});\n```\n\n\n## Compiling partials\n\nThe following example will precompile and register partials for all `.hbs` files in `source/templates/` that start with an underscore, then store the result as `build/js/partials.js`;\n\n```javascript\nvar path = require('path');\nvar gulp = require('gulp');\nvar wrap = require('gulp-wrap');\nvar concat = require('gulp-concat');\nvar handlebars = require('gulp-handlebars');\n\ngulp.task('partials', function() {\n  // Assume all partials start with an underscore\n  // You could also put them in a folder such as source/templates/partials/*.hbs\n  gulp.src(['source/templates/_*.hbs'])\n    .pipe(handlebars())\n    .pipe(wrap('Handlebars.registerPartial(<%= processPartialName(file.relative) %>, Handlebars.template(<%= contents %>));', {}, {\n      imports: {\n        processPartialName: function(fileName) {\n          // Strip the extension and the underscore\n          // Escape the output with JSON.stringify\n          return JSON.stringify(path.basename(fileName, '.js').substr(1));\n        }\n      }\n    }))\n    .pipe(concat('partials.js'))\n    .pipe(gulp.dest('build/js/'));\n});\n```\n\nSee the [partials example](examples/partials) for a full example that compiles partials and templates down to a single file.\n\n\n## Compiling using a specific Handlebars version\n\nYou can use different versions of Handlebars by specifying the version in your `package.json` and passing it as `options.handlebars`:\n\n#### package.json\n```json\n{\n  \"devDependencies\": {\n    \"handlebars\": \"^1.3.0\"\n  }\n}\n```\n\n#### gulpfile.js\n```js\ngulp.task('templates', function(){\n  gulp.src('source/templates/*.hbs')\n    .pipe(handlebars({\n      handlebars: require('handlebars')\n    }))\n    .pipe(wrap('Handlebars.template(<%= contents %>)'))\n    .pipe(declare({\n      namespace: 'MyApp.templates',\n      noRedeclare: true, // Avoid duplicate declarations\n    }))\n    .pipe(concat('templates.js'))\n    .pipe(gulp.dest('build/js/'));\n});\n```\n\n**The runtime you include on the client side MUST match the version you compile templates with.** You cannot use the the 2.x runtime with 1.x templates. The [handlebars1 example](examples/handlebars1) copies the runtime from `node_modules/handlebars/dist/handlebars.runtime.js` and uses that on the client side. Follow a similar pattern in your application to keep the runtime up to date with the compiler.\n\n## Compiling to separate modules for Node/Browserify\n\nThis example will make templates available for loading via [Node's require](http://nodejs.org/api/globals.html#globals_require):\n\n#### gulpfile.js\n```js\nvar handlebars = require('gulp-handlebars');\nvar defineModule = require('gulp-define-module');\n\ngulp.task('templates', function(){\n  gulp.src(['templates/*.hbs'])\n    .pipe(handlebars())\n    .pipe(defineModule('node'))\n    .pipe(gulp.dest('build/templates/'));\n});\n```\n\nTemplates can then be used within Node as such:\n\n```js\nvar appTemplate = require('./build/templates/App.Header.js');\nvar html = appTemplate(data);\n```\n\n## Compiling to a single module for use in Node/Browserify\n\nSee the [singleModule example](examples/singleModule) if you'd like to have a single module that contains all of your templates that can be used like so:\n\n#### yourApp.js\n```js\nvar templates = require('./templates');\nvar output = templates.App.header();\n```\n\n## Processing the generated template AST\n\nThe example below removes any partial and replaces it with the text `foo`.\n\n#### gulpfile.js\n```js\nhandlebars({\n  processAST: function(ast) {\n    ast.statements.forEach(function(statement, i) {\n      if (statement.type === 'partial') {\n        ast.statements[i] = { type: 'content', string: 'foo' };\n      }\n    });\n  }\n})\n```\n\n## API\n\n### handlebars(options)\n\n#### options.compilerOptions\nType: `Object`\n\nCompiler options to pass to `Handlebars.precompile()`.\n\n#### options.processAST\nType: `Function`\n\nA function which will be passed the parsed Handlebars Abstract Syntax Tree. You can modify the AST in place or return a new AST to change the source of the precompiled template.\n\n#### options.handlebars\nType: `Object`\n\nHandlebars library to use for precompilation. By default, the latest stable version of Handlebars is used.\n\n\n\n[travis-url]: http://travis-ci.org/lazd/gulp-handlebars\n[travis-image]: https://secure.travis-ci.org/lazd/gulp-handlebars.png?branch=master\n[npm-url]: https://npmjs.org/package/gulp-handlebars\n[npm-image]: https://badge.fury.io/js/gulp-handlebars.png\n\n[gulp-define-module documentation]: https://www.npmjs.org/package/gulp-define-module#definemodule-type-options-\n[gulp-define-module]: https://www.npmjs.org/package/gulp-define-module\n[gulp-declare]: https://www.npmjs.org/package/gulp-declare\n[gulp-wrap]: https://www.npmjs.org/package/gulp-wrap\n[ember-handlebars]: https://www.npmjs.org/package/ember-handlebars\n",
  "readmeFilename": "README.md",
  "_id": "gulp-handlebars@4.0.0",
  "_from": "gulp-handlebars@~4.0.0"
}
