{
  "name": "gulp-wrap",
  "version": "0.11.0",
  "description": "A gulp plugin to wrap the stream contents with a template.",
  "repository": {
    "type": "git",
    "url": "git://github.com/adamayres/gulp-wrap"
  },
  "author": {
    "name": "Adam Ayres",
    "email": "magicaj@gmail.com",
    "url": "https://github.com/adamayres"
  },
  "contributors": [
    {
      "name": "Shinnosuke Watanabe",
      "email": "snnskwtnb@gmail.com",
      "url": "https://github.com/shinnn"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/adamayres/gulp-wrap/blob/master/LICENSE"
    }
  ],
  "files": [
    "index.js"
  ],
  "scripts": {
    "pretest": "jscs *.js test/test.js && eslint *.js test/test.js",
    "test": "_mocha",
    "coverage": "istanbul cover _mocha",
    "coveralls": "${npm_package_scripts_coverage} && istanbul-coveralls"
  },
  "keywords": [
    "gulpplugin",
    "wrap",
    "template",
    "lodash",
    "consolidate",
    "gulp"
  ],
  "dependencies": {
    "consolidate": "^0.11.0",
    "es6-promise": "^2.0.1",
    "fs-readfile-promise": "^1.1.0",
    "gulp-util": "^3.0.3",
    "js-yaml": "^3.2.6",
    "lodash": "^3.1.0",
    "node.extend": "^1.1.2",
    "through2": "^0.6.3",
    "tryit": "^1.0.1",
    "vinyl-bufferstream": "^1.0.1"
  },
  "devDependencies": {
    "eslint": "^0.14.1",
    "istanbul": "^0.3.5",
    "istanbul-coveralls": "^1.0.1",
    "jscs": "^1.11.3",
    "mocha": "^2.1.0",
    "simple-bufferstream": "0.0.4",
    "vinyl": "^0.4.6"
  },
  "engines": {
    "node": ">=0.10",
    "npm": ">=1.4.3"
  },
  "jscsConfig": {
    "preset": "google",
    "maximumLineLength": 98,
    "requireBlocksOnNewline": true,
    "validateLineBreaks": "LF"
  },
  "readme": "# gulp-wrap\n\n[![NPM version](https://img.shields.io/npm/v/gulp-wrap.svg?style=flat)](https://www.npmjs.com/package/gulp-wrap)\n[![Build Status](https://secure.travis-ci.org/adamayres/gulp-wrap.svg?branch=master)](http://travis-ci.org/adamayres/gulp-wrap)\n[![Coverage Status](https://img.shields.io/coveralls/adamayres/gulp-wrap.svg?style=flat)](https://coveralls.io/r/adamayres/gulp-wrap)\n[![Dependency Status](https://img.shields.io/david/adamayres/gulp-wrap.svg?style=flat&label=deps)](https://david-dm.org/adamayres/gulp-wrap)\n[![devDependency Status](https://img.shields.io/david/dev/adamayres/gulp-wrap.svg?style=flat&label=devDeps)](https://david-dm.org/adamayres/gulp-wrap#info=devDependencies)\n\n> A [gulp](https://github.com/gulpjs/gulp) plugin to wrap the stream contents with a [lodash](http://lodash.com/docs#template) template.\n\n## Usage\n\nFirst, install `gulp-wrap` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-wrap\n```\n\nThen, add it to your `gulpfile.js`:\n\n**Wrap the contents with an inline template:**\n\n```javascript\nvar wrap = require(\"gulp-wrap\");\n\ngulp.src(\"./src/*.json\")\n    .pipe(wrap('angular.module(\\'text\\', []).value(<%= contents %>);'))\n    .pipe(gulp.dest(\"./dist\"));\n```\n\n**Wrap the contents with a template from file:**\n\n```javascript\nvar wrap = require(\"gulp-wrap\");\n\ngulp.src(\"./src/*.json\")\n    .pipe(wrap({ src: 'path/to/template.txt'}))\n    .pipe(gulp.dest(\"./dist\"));\n```\n\n**Use parsed contents within a template (supports JSON and YAML):**\n\n```javascript\nvar wrap = require(\"gulp-wrap\");\n\ngulp.src(\"./src/*.json\")\n    .pipe(wrap('Hello, <%= contents.title %>, have a <%= contents.adjective %> day.'))\n    .pipe(gulp.dest(\"./dist\"));\n```\n\n**Provide additional data and options for template processing:**\n\n```javascript\nvar wrap = require(\"gulp-wrap\");\n\ngulp.src(\"./src/*.json\")\n    .pipe(wrap('BEFORE <%= data.contents %> <%= data.someVar %> AFTER', { someVar: 'someVal'}, { variable: 'data' }))\n    .pipe(gulp.dest(\"./dist\"));\n```\n\nThis gulp plugin wraps the stream contents in a template. If you want the stream contents to be the templates use the [gulp-template](https://github.com/sindresorhus/gulp-template) plugin.\n\n## Template\n\nThe stream contents will be available in the template using the `contents` key. If the file extension is `json`, `yaml`, or `yml` then the contents will be parsed before being passed to the template. Properties from the vinyl file will be available in the template under the `file` object and are local to that stream. User supplied `data` values will always take precedence over namespace clashes with the file properties.\n\n## API\n\n### wrap(template\\[,data\\]\\[,options\\])\n\n#### template\nType: `String` or `Object` or `Function`\n\nThe template to used. When a `String` then it will be used as the template. When an `Object` then the template will be loaded from file. When a `Function` then the function will be called and should return the template content. This function get the `data` object as first parameter.\n\n#### template.src\nType: `String`\n\nThe file location of the template.\n\n#### data\nType: `Object`\n\nThe data object that is passed on to the [lodash](http://lodash.com/docs#template) template call.\n\n#### options\nType: `Object`\n\nThe options object that is passed on to the [lodash](http://lodash.com/docs#template) template call.\n\n#### options.parse\nType: `Boolean`\n\nSet to explicit `false` value to disable automatic JSON and YAML parsing.\n\n#### options.engine\nType: `String`\n\nSet the [consolidate template engine](https://www.npmjs.com/package/consolidate) to use. (default to `lodash`).\nUsing another engine that `lodash` may require installation of additional node package.\n\n## License\n\n[MIT License](http://en.wikipedia.org/wiki/MIT_License)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/adamayres/gulp-wrap/issues"
  },
  "_id": "gulp-wrap@0.11.0",
  "_from": "gulp-wrap@~0.11.0"
}
