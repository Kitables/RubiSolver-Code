{
  "name": "gulp-define-module",
  "version": "0.1.3",
  "description": "gulp.js plugin for creating modules",
  "homepage": "https://github.com/wbyoung/gulp-define-module",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha --report $(if [ \"$TRAVIS\" ]; then echo lcovonly; else echo html; fi) -- && if [ \"$TRAVIS\" ]; then cat ./coverage/lcov.info | ./node_modules/.bin/coveralls; fi"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/wbyoung/gulp-define-module.git"
  },
  "keywords": [
    "gulpplugin",
    "gulpfriendly",
    "amd",
    "commonjs",
    "node"
  ],
  "author": {
    "name": "Whitney Young"
  },
  "license": "MIT",
  "dependencies": {
    "through": "^2.3.0",
    "lodash": "^3.6.0",
    "gulp-util": "^3.0.4"
  },
  "devDependencies": {
    "coveralls": "^2.11.2",
    "istanbul": "^0.3.11",
    "mocha": "^2.2.1",
    "should": "^5.2.0"
  },
  "readme": "# gulp-define-module\n\n[![NPM version][npm-image]][npm-url] [![Build status][travis-image]][travis-url] [![Code Climate][codeclimate-image]][codeclimate-url] [![Coverage Status][coverage-image]][coverage-url] [![Dependencies][david-image]][david-url] [![devDependencies][david-dev-image]][david-dev-url]\n\nThe gulp define module plugin produces modules from an input source. It allows\n[other plugins](https://github.com/wbyoung/gulp-ember-emblem) to offload module definition\nto a separate plugin. For consistency, the input source should contain a single JavaScript\nexpression and should not contain a trailing semicolon.\n\nAn example input file to create a callable module:\n\n```javascript\n{\n  start: function() {},\n  end: function() {},\n  version: \"1.0\"\n}\n```\n\nTransformed to **CommonJS/Node** (`defineModule('commonjs')` or `defineModule('node')`):\n\n```javascript\nmodule.exports = {\n  start: function() {},\n  end: function() {},\n  version: \"1.0\"\n};\n```\n\nTransformed to **AMD** (`defineModule('amd')`):\n\n```javascript\ndefine([], function() {\n  return {\n    start: function() {},\n    end: function() {},\n    version: \"1.0\"\n  };\n});\n```\n\nTransformed to **Hybrid** (`defineModule('hybrid')`):\n\n```javascript\n(function(definition) {\n  if (typeof exports === 'object') { module.exports = definition(); } // CommonJS\n  else if (typeof define === 'function' && define.amd) { define([], definition); } // AMD\n  else { definition(); } // Browser\n})(function() {\n  return {\n    start: function() {},\n    end: function() {},\n    version: \"1.0\"\n  };\n});\n```\n\nTransformed to **Plain** (`defineModule('plain')`):\n\n```javascript\n{\n  start: function() {},\n  end: function() {},\n  version: \"1.0\"\n};\n```\n\nTo use the module simply include it in your gulp pipeline:\n\n```javascript\nvar emberEmblem = require('gulp-ember-emblem');\nvar defineModule = require('gulp-define-module');\n\ngulp.task('templates', function(){\n  gulp.src(['client/templates/*.hbs'])\n    .pipe(emberEmblem())\n    .pipe(defineModule('commonjs'))\n    .pipe(gulp.dest('build/templates/'));\n});\n```\n\n\n## API\n\n### defineModule(type, [options])\n\n#### type\nType: `String`  \nDefault: `bare`\n\nThe desired output type. One of the following:\n\n* `commonjs` - Produce CommonJS modules\n* `node` - Produce Node modules (alias for `commonjs`)\n* `amd` - Produce AMD modules\n* `hybrid` - Produce hybrid modules that can be used in most environments\n* `plain` - Return an unmolested function definition\n\n\n#### options.require\n\nType: `Object`  \nDefault: `{}`\n\nAn object containing dependencies that should be imported for this module. This option is only\nsupported for `commonjs`, `node`, `amd`, and `hybrid` modules. For other systems, you will have\nto manage the dependency loading in another way.\n\nThe property name in the object should be the value of the variable that the\ndependency will be accessed from, and the property value should be the name\nof the dependency.\n\nFor instance, `{ Library: 'library' }` will produce:\n\n**CommonJS/Node**\n\n```javascript\nvar Library = Library || require('library');\n\nmodule.exports = {};\n```\n\n\n**AMD**\n\n```javascript\ndefine(['library'], function(Library) {\n  return {};\n});\n```\n\n**Hybrid**\n\n```javascript\n(function(definition) {\n  if (typeof exports === 'object') { module.exports = definition(require('library')); } // CommonJS\n  else if (typeof define === 'function' && define.amd) { define(['library'], definition); } // AMD\n  else { definition(Library); } // Browser\n})(function(Library) {\n  return {};\n});\n```\n\n\n\n#### options.wrapper\n\nType: `String`  \nDefault: `false`\n\nWrapper in which to wrap input modules. This wrapper will be processed\nthrough [lodash.template] with the following context:\n\n[gulp-handlebars], for instance, sets a wrapper of `\"Handlebars.template(<%= contents %>)\"`.\n\n#### options.context\n\nType: `Object` or `Function`  \nDefault: `undefined`\n\nExtend the context that's used to process the wrapper. If you pass an object, it will simply\nbe merged with the default context.\n\nA function argument should have the signature `function(context) { return {}; }`. The\ndefault context will be passed to your function and you can return new values to add\nto the context. For instance, you can create complex definitions on a per-file basis.\n\n```js\ndefineModule('plain', {\n  wrapper: 'MyApp.templates[\"<%= templateName %>\"] = <%= contents %>',\n  context: function(context) {\n    var file = context.file;\n    var name = path.relative(file.cwd, file.path)\n      .slice(0, -path.extname(file.path).length)\n      .split(path.sep).join('.');\n    return { templateName: name };\n  }\n})\n```\n\nThis will result in a template file, `app/view.js` with an empty function, `function() {}`, being compiled to\n`MyApp.templates[\"app.view\"] = function() {};`.\n\n\n## For gulp plugin developers\n\nPlugin developers can pass options on to this plugin so that users don't have to define\nvalues that may be the most common setup for modules.\n\nTo do so set the `defineModuleOptions` on the [`file`](https://github.com/gulpjs/gulp-util#new-fileobj)\nobject. This object will be merged with options that users pass in to their `defineModule` pipe\n(user's options take precedence). It's recommended that if you define _wrapper_ in these options,\nthat you make it a single value from the _context_ for usage simplicity.\n\nFor an example, see [gulp-ember-emblem].\n\n\n## License\n\nThis project is distributed under the MIT license.\n\n\n[travis-url]: http://travis-ci.org/wbyoung/gulp-define-module\n[travis-image]: https://secure.travis-ci.org/wbyoung/gulp-define-module.png?branch=master\n[npm-url]: https://npmjs.org/package/gulp-define-module\n[npm-image]: https://badge.fury.io/js/gulp-define-module.png\n[codeclimate-image]: https://codeclimate.com/github/wbyoung/gulp-define-module.png\n[codeclimate-url]: https://codeclimate.com/github/wbyoung/gulp-define-module\n[coverage-image]: https://coveralls.io/repos/wbyoung/gulp-define-module/badge.png\n[coverage-url]: https://coveralls.io/r/wbyoung/gulp-define-module\n[david-image]: https://david-dm.org/wbyoung/gulp-define-module.png?theme=shields.io\n[david-url]: https://david-dm.org/wbyoung/gulp-define-module\n[david-dev-image]: https://david-dm.org/wbyoung/gulp-define-module/dev-status.png?theme=shields.io\n[david-dev-url]: https://david-dm.org/wbyoung/gulp-define-module#info=devDependencies\n\n[gulp-define-module]: https://github.com/wbyoung/gulp-define-module\n[gulp-handlebars]: https://github.com/lazd/gulp-handlebars\n[gulp-ember-emblem]: https://github.com/wbyoung/gulp-ember-emblem\n[lodash.template]: http://lodash.com/docs#template\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/wbyoung/gulp-define-module/issues"
  },
  "_id": "gulp-define-module@0.1.3",
  "_from": "gulp-define-module@~0.1.3"
}
